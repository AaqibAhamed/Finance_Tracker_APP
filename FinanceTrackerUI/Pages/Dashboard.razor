@page "/"
@using FinanceTrackerModels.DTOs
@using FinanceTrackerUI.Services
@using MudBlazor.Extensions
@inject IncomeService IncomeService
@inject ExpenseService ExpenseService
@inject IDialogService DialogService

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h4" Class="mb-4">Personal Finance Summary</MudText>

    <MudGrid Spacing="3">
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Class="pa-3 mud-elevation-2">
                <MudText Typo="Typo.h6">Total Income</MudText>
                <MudText Typo="Typo.h5">$@totalIncome.ToString("N2")</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Class="pa-3 mud-elevation-2">
                <MudText Typo="Typo.h6">Total Expenses</MudText>
                <MudText Typo="Typo.h5">$@totalExpenses.ToString("N2")</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="4">
            <MudPaper Class="pa-3 mud-elevation-2">
                <MudText Typo="Typo.h6">Savings</MudText>
                <MudText Typo="Typo.h5" Color="@(savings >= 0 ? Color.Success : Color.Error)">$@savings.ToString("N2")</MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <MudText Typo="Typo.h6" Class="mt-4">Recent Transactions</MudText>
    <MudTabs Elevation="2" Rounded="true">
        <MudTab Title="Income">
        <title>Income</title>
            <MudGrid Spacing="3">
                <MudItem xs="12" sm="6" md="4">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/addIncome">Add Income</MudButton>
                </MudItem>
            </MudGrid>
            <MudTable Items="@incomes" Dense="@dense" hover="@hover" Bordered="@bordered" Striped="@striped">
                <HeaderContent>
                    <MudTh>Description</MudTh>
                    <MudTh Sortable="true" SortBy="@(new Func<GetIncomeDto, object>(x => x.Amount))">Amount</MudTh>
                    <MudTh Sortable="true" SortBy="@(new Func<GetIncomeDto, object>(x => x.Date))">Date</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Description">@context.Description</MudTd>
                    <MudTd DataLabel="Amount">@context.Amount.ToString("N2")</MudTd>
                    <MudTd DataLabel="Date">@context.Date.ToIsoDateString()</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Primary" href="@($"/editincome/{context.Id}")"></MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Secondary" OnClick="@(() => DeleteIncome(context.Id))"></MudIconButton>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager T="IncomeDto" Table="@table" PageSizeOptions="new int[]{5, 10, 20}" />
                </PagerContent>
            </MudTable>
        </MudTab>
        <MudTab Title="Expenses">
           <title>Expenses</title>
            <MudTable Items="@expenses" Dense="@dense" hover="@hover" Bordered="@bordered" Striped="@striped">
                <HeaderContent>
                    <MudTh>Description</MudTh>
                    <MudTh Sortable="true" SortBy="@(new Func<GetExpenseDto, object>(x => x.Amount))">Amount</MudTh>
                    <MudTh Sortable="true" SortBy="@(new Func<GetExpenseDto, object>(x => x.Date))">Date</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Description">@context.Description</MudTd>
                    <MudTd DataLabel="Amount">@context.Amount.ToString("N2")</MudTd>
                    <MudTd DataLabel="Date">@context.Date.ToIsoDateString()</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Primary" href="@($"/editexpense/{context.Id}")"></MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Secondary" OnClick="@(() => DeleteExpense(context.Id))"></MudIconButton>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager T="ExpenseDto" Table="@table2" PageSizeOptions="new int[]{5, 10, 20}" />
                </PagerContent>
            </MudTable>
        </MudTab>
    </MudTabs>
</MudPaper>

@code {
    private IEnumerable<GetIncomeDto> incomes = new List<GetIncomeDto>();
    private IEnumerable<GetExpenseDto> expenses = new List<GetExpenseDto>();
    private decimal totalIncome = 0;
    private decimal totalExpenses = 0;
    private decimal savings = 0;

    private bool dense = false;
    private bool hover = true;
    private bool bordered = false;
    private bool striped = false;
    private MudTable<GetIncomeDto> table = null!;
    private MudTable<GetExpenseDto> table2 = null!;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var incomeResult = await IncomeService.GetIncomes(pageSize: 100); // Load all for summary
        incomes = incomeResult.Items;
        totalIncome = incomes.Sum(i => i.Amount);

        var expenseResult = await ExpenseService.GetExpenses(pageSize: 100); // Load all for summary
        expenses = expenseResult.Items;
        totalExpenses = expenses.Sum(e => e.Amount);

        savings = totalIncome - totalExpenses;
    }
    
    private async Task DeleteIncome(int id)
    {
        var parameters = new DialogParameters { ["Content"] = "Are you sure you want to delete this income entry?" };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
        var dialog = DialogService.Show<MudDialog>("Confirm", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var response = await IncomeService.DeleteIncome(id);
            if (response.IsSuccessStatusCode)
            {
                await LoadData();
                StateHasChanged();
            }
            else
            {
                DialogService.Show<MudAlert>("Error", new DialogParameters { ["Content"] = "Failed to delete income entry." });
            }
        }
    }

    private async Task DeleteExpense(int id)
    {
        var parameters = new DialogParameters { ["Content"] = "Are you sure you want to delete this expense entry?" };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
        var dialog = DialogService.Show<MudDialog>("Confirm", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var response = await ExpenseService.DeleteExpense(id);
            if (response.IsSuccessStatusCode)
            {
                await LoadData();
                StateHasChanged();
            }
            else
            {
                DialogService.Show<MudAlert>("Error", new DialogParameters { ["Content"] = "Failed to delete expense entry." });
            }
        }
    }

}