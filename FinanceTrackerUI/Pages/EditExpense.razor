@page "/editexpense/{id:int}"
@using FinanceTrackerModels.DTOs
@using FinanceTrackerUI.Services
@inject ExpenseService ExpenseService
@inject NavigationManager NavigationManager

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5">Edit Expense</MudText>
    <MudForm @ref="_form" @bind-Model="expenseModel" @bind-IsValid="@success" @bind-Errors="@errors">
        <MudTextField @bind-Value="expenseModel.Description" Label="Description" Required="true" RequiredError="Description is required" />
        <MudNumericField  T="decimal" @bind-Value="expenseModel.Amount" Label="Amount" Required="true" RequiredError="Amount is required" Min="1" Format="N2" />
        <MudDatePicker @bind-Date="expenseModel.Date" Label="Date" Required="true" RequiredError="Date is required" MaxDate="@DateTime.Now.Date" />
        <MudButton Variant="Variant.Filled" Color="Color.Primary"  Class="mt-3" OnClick="UpdateExpense" Disabled="@(!success)">Update Expense</MudButton>
        <MudButton Variant="Variant.Outlined" Class="ml-2 mt-3" OnClick="Cancel">Cancel</MudButton>
    </MudForm>
    <MudAlert Severity="Severity.Success" Class="mt-3" Visible="@_showSuccessAlert">Expense updated successfully!</MudAlert>
    <MudAlert Severity="Severity.Error" Class="mt-3" Visible="@_showErrorAlert">Failed to update expense.</MudAlert>
</MudPaper>

@code {
    [Parameter]
    public int Id { get; set; }

    private MudForm? _form;
    private ExpenseDto updateExpenseModel = new ExpenseDto();
    private GetExpenseDto expenseModel = new GetExpenseDto();
    private bool success;
    private string[] errors = [];
    private bool _showSuccessAlert = false;
    private bool _showErrorAlert = false;

    protected override async Task OnInitializedAsync()
    {
        var expense = await ExpenseService.GetExpense(Id);
        if (expense != null)
        {
            expenseModel = expense;
        }
        else
        {
            NavigationManager.NavigateTo("/"); // Redirect if expense not found
        }
    }

    private async Task UpdateExpense()
    {
        await _form!.Validate();

        if (success)
        {
            var response = await ExpenseService.UpdateExpense(Id, updateExpenseModel);
            if (response.IsSuccessStatusCode)
            {
                _showSuccessAlert = true;
                _showErrorAlert = false;
                await Task.Delay(1500); // Show success message briefly
                NavigationManager.NavigateTo("/");
            }
            else
            {
                _showSuccessAlert = false;
                _showErrorAlert = true;
            }
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }
}